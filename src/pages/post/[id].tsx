import { LoadingSpinner } from '@/components/Spinner'
import { api } from '@/utils/api'
import { useUser } from '@clerk/nextjs'
import dayjs from 'dayjs'
import relativeTime from 'dayjs/plugin/relativeTime'
import { type NextPage, InferGetStaticPropsType, GetStaticProps } from 'next'
import Head from 'next/head'
import { toast } from 'react-hot-toast'
dayjs.extend(relativeTime)
import { createServerSideHelpers } from '@trpc/react-query/server'
import { appRouter } from '@/server/api/root'
import SuperJSON from 'superjson'
import { NJSON } from 'next-json'
import { prisma } from '@/server/db'
import { PageLayout } from '@/components/layout'
import Image from 'next/image'
import PostView from '@/components/postview'

const PostPage: NextPage<{ id: string }> = (
  props: InferGetStaticPropsType<typeof getStaticProps>,
) => {
  const { data, isLoading: userLoading } = api.post.getSinglePostById.useQuery({
    id: props.id,
  })

  if (userLoading) return <LoadingSpinner />

  if (!data) return <div>404</div>

  return (
    <>
      <Head>
        <title>{`Â· ${data.post.content.substr(-10)}...`}</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <PageLayout>
        <div className='h-50 content-center'></div>
        <div className='content-center border-b border-slate-100 '>
          <PostView {...data} noRedirect />
        </div>
      </PageLayout>
    </>
  )
}

export const getStaticProps: GetStaticProps = async (context) => {
  // const helpers = createServerSideHelpers({
  //   router: appRouter,
  //   ctx: {
  //     prisma,
  //     session: null,
  //   },
  //   transformer: SuperJSON,
  // })

  const id = context.params?.id

  if (typeof id !== 'string') throw new Error('No id provided')

  // await helpers.profiles.getUserByUsername.prefetch({
  //   username: id,
  // })

  return {
    props: {
      // trpcState: NJSON.stringify(helpers.dehydrate()),
      id,
    },
  }
}

export const getStaticPaths = async () => {
  return {
    paths: [],
    fallback: 'blocking',
  }
}

export default PostPage
